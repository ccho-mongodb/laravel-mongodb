.. _laravel-transactions:

============
Transactions
============

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, rollback, commit, callback, code example, acid, atomic, consistent, isolated, durable

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to perform a **transaction** in MongoDB by
using the {+odm-long+}. Transactions let you run a sequence of write operations
that update the data only when the transaction is committed.

If the transaction fails, the PHP library which manages MongoDB operations
for {+odm-short+} discards all the data changes made within the transaction
before they become visible. This property of transactions is called
**atomicity**.

MongoDB performs write operations on single documents atomically. If you
need atomicity for write operations on multiple documents or need data
consistency across multiple documents for your operations, run them in a
multi-document transaction.

Multi-document transactions are **ACID compliant** because MongoDB
guarantees that the data involved in your transaction operations remains
consistent, even if the driver encounters unexpected errors.

Learn how to perform transactions in the following sections of this guide:

- :ref:`laravel-trasnactions-requirements`
- :ref:`laravel-transaction-callback`
- :ref:`laravel-transaction-commit`
- :ref:`laravel-transaction-rollback`

To learn more about transactions in MongoDB, see :manual:`Transactions </core/transactions/>`
in the {+server-docs-name+}.

.. _laravel-trasnactions-requirements:

Requirements and Limitations
----------------------------

To perform transactions in MongoDB, you must be using the following MongoDB
version and topology:

- MongoDB version 4.0 or later
- A replica set deployment or sharded cluster

Specific versions of MongoDB have the following limitations:

- In MongoDB versions 4.2 and earlier, write operations performed within a
  transaction must be on collections that already exist. In MongoDB versions
  4.4 and later, the server automatically creates collections as necessary when
  you perform write operations in a transaction. To learn more about this
  limitation, see :manual:`Create Collections and Indexes in a Transaction </core/transactions/#create-collections-and-indexes-in-a-transaction>`
  in the {+server-docs-name+}.
- MongoDB does not support nested transactions. If you attempt to start a
  transaction within another one, the extension raises a ``RuntimeException``.
  To learn more about this limitation, see :manual:`Transactions and Sessions </core/transactions/#transactions-and-sessions>`
  in the {+server-docs-name+}.
- The {+odm-long+} does not support the database testing traits
  ``Illuminate\Foundation\Testing\DatabaseTransactions`` and ``Illuminate\Foundation\Testing\RefreshDatabase``.
  As a workaround, you can create migrations along with the ``Illuminate\Foundation\Testing\DatabaseMigrations``
  trait to reset the database after each test.

.. _laravel-transaction-callback:

Run a Transaction in a Callback
-------------------------------

This section shows how you can run a transaction as a callback.

When using this method of running a transaction, all the code in the
callback method is run as a single transaction.

In the following example, the transaction consists of write operations that
transfer the funds from a bank account, represented by the ``Account`` model,
to another account:

.. literalinclude:: /includes/fundamentals/transactions/TransactionsTest.php
   :language: php
   :dedent:
   :start-after: begin transaction callback
   :end-before: end transaction callback

You can optionally pass the maximum number times to retry a failed transaction
as the second parameter as shown in the following code example:

.. code-block:: php
   :emphasize-lines: 4

   DB::transaction(function() {
           // transaction code
       },
       retries: 5,
   );


.. _laravel-transaction-commit:

Begin and Commit a Transaction
------------------------------

This section shows how to start and commit a transaction.

To use this method of starting and committing a transaction, call the
``DB::beginTransaction()`` to start the transaction. Then, call the
``DB::commit()`` method to end the transaction, which applies all the updates
performed within the transaction.

In the following example, the balance from the first account is moved to the
second account, after which the first account is deleted:

.. literalinclude:: /includes/fundamentals/transactions/TransactionsTest.php
   :language: php
   :dedent:
   :start-after: begin transaction commit
   :end-before: end transaction commit

.. _laravel-transaction-rollback:

Roll Back a Transaction
-----------------------

This section shows how to roll back a transaction. A rollback reverts all the
write operations performed within that transaction.

To perform the roll back, call the ``DB::rollback()`` function anytime before
the transaction is committed.

In the following example, the transaction consists of write operations that
transfer funds from one account, represented by the ``Account`` model, to
multiple other accounts. If the sender account has insufficient funds, the
transaction is rolled back and none of the models are updated:

.. literalinclude:: /includes/fundamentals/transactions/TransactionsTest.php
   :language: php
   :dedent:
   :start-after: begin transaction rollback
   :end-before: end transaction rollback

