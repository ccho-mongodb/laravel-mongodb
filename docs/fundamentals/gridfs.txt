.. _laravel-fundamentals-gridfs:

======
GridFS
======

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, file storage, large files, upload, stream, chunk size

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to store and retrieve large files in
MongoDB using **GridFS**. GridFS is a specification that describes how
to split files into chunks during storage and reassemble them during retrieval.
{+odm-short+} uses the PHP Library driver implementation of GridFS to manage
the operations and organization of the file storage.

Use GridFS if the size of your file exceeds the MongoDB BSON document
size limit of 16 megabytes. For more detailed information on whether GridFS is
suitable for your use case, see the :manual:`GridFS Server manual page </core/gridfs>`.

Navigate the following sections to learn more about GridFS operations
and implementation:

- :ref:`Select a GridFS Bucket <gridfs-select-bucket>`
- :ref:`Upload Files <gridfs-upload-files>`
- :ref:`Download Files <gridfs-download-files>`

How GridFS Works
----------------

GridFS organizes files in a **bucket**, a group of MongoDB collections
that contain the chunks of files and descriptive information. Buckets contain
the following collections:

- ``chunks``, which stores the binary file chunks
- ``files``, which stores the file metadata

When you create a new GridFS bucket, the driver creates the following data:

- Collections for ``chunks`` and ``files``, prefixed with the default bucket
  name ``fs`` followed by a ``.`` character, unless you specify a different name.
- An index on each collection to retrieve files and related metadata efficiently.

To learn more, see :manual:`GridFS Indexes </core/gridfs/#gridfs-indexes>` in
the {+server-docs-name+}.

When storing files with GridFS, the driver splits the files into smaller
pieces, each represented by a separate document in the ``chunks`` collection.
The driver creates a document in the ``files`` collection that contains
a unique file id, file name, and other file metadata. You can upload the file
from memory or from a stream. The following diagram shows how GridFS splits
files when uploading to a bucket:

.. figure:: /includes/figures/GridFS-upload.png
   :alt: A diagram that shows how GridFS uploads a file to a bucket

When retrieving files, GridFS fetches the metadata from the ``files``
collection in the specified bucket and uses the information to reconstruct
the file from documents in the ``chunks`` collection. You can read the file
into memory or output it to a stream.

.. _gridfs-select-bucket:

Select a GridFS Bucket
----------------------

To store or retrieve files from GridFS, select a new or existing bucket on
a MongoDB database. MongoDB creates a bucket only when you upload the first
file to it.

You can select a GridFS bucket by using one of the following methods:

- Instantiate a ``MongoDB\GridFS\Bucket`` by using the PHP extension
- Call the ``selectGridFSBucket()`` method from the PHP Library ``MongoDB\Database`` class

The bucket can be constructed with various options:

- ``bucketName`` determines the prefix for the bucket's metadata and chunk
  collections. The default value is ``"fs"``.
- ``chunkSizeBytes`` determines the size of each chunk. GridFS divides the
  file into chunks of this length, except for the last, which is only as large
  as needed. The default size is ``261120``, which equals 255 KiB.

The following example shows how to select a bucket named ``grid`` on the
``filesDb`` database and specify options on it by instantiating a
``MongoDB\GridFS\Bucket``:

.. code-block:: php

   $manager = new MongoDB\Driver\Manager(/* connection string */);
   $bucket = new MongoDB\GridFS\Bucket(
       $manager,
       'filesDb',
       [
           'bucketName' => 'grid',
           'chunkSizeBytes' => 1048576,
       ]);


The following example shows how to select a bucket named ``grid`` on the
``filesDb`` database and specify options on it by calling the
``selectGridFSBucket()`` method:

.. code-block:: php

   $db = (new MongoDB\Client(/* connection string */))->filesDb;
   $bucket = $db->selectGridFSBucket([
       'bucketName' => 'grid',
       'chunkSizeBytes' => 1048576,
   ]);

For more information on these classes and the options that you can specify,
see the following API documentation:

- `MongoDBGridFSBucket constructor <https://www.mongodb.com/docs/php-library/current/reference/method/MongoDBGridFSBucket__construct/#mongodb-phpmethod-phpmethod.MongoDB-GridFS-Bucket--__construct-->`__
- `selectGridFSBucket() method <https://www.mongodb.com/docs/php-library/master/reference/method/MongoDBDatabase-selectGridFSBucket/#phpmethod.MongoDB\Database::selectGridFSBucket>`__

.. _gridfs-upload-files:

Upload Files
------------

To upload a file to a GridFS by using a writable stream, you can either open
a stream and write to it directly or write the entire contents of a readable
stream to GridFS at once.

The examples in this section use the following variables and values:

- ``$bucket`` references the selected bucket
- ``new-file.txt`` is the name of GridFS file you write to
- ``/path/to/source-file.txt`` is the path of the file that you want to upload

The following example shows how to open an upload stream and write to it
directly:

.. code-block:: php

   $stream = $bucket->openUploadStream('new-file.txt');
   $contents = file_get_contents('/path/to/source-file.txt');
   fwrite($stream, $contents);
   fclose($stream);

The following example shows how to upload the entire contents of a readable
stream at once:

.. code-block:: php

   $file = fopen('/path/to/source-file.txt', 'rb');
   $bucket->uploadFromStream('new-file.txt', $file);

.. _gridfs-download-files:

Download Files
--------------

To download a file from GridFS by using a readable stream, you can either open
a stream and read from it directly or download the entire file at once.

The examples in this section use the following variables and values:

- ``$bucket`` references the selected bucket
- ``$fileId`` references the ``MongoDB\BSON\ObjectId`` value of the file to download
- ``/path/to/download-file.txt`` is the download file path

The following example shows how to open a download stream and read from it:

.. code-block:: php

   $stream = $bucket->openDownloadStream($fileId);
   $contents = stream_get_contents($stream);

The following example shows how to download the file at once and write it to
a writable stream:

.. code-block:: php

   $file = fopen('/path/to/download-file.txt', 'wb');
   $bucket->downloadToStream($fileId, $file);

To learn more, see the `GridFS <https://www.mongodb.com/docs/php-library/current/tutorial/gridfs/>`__
PHP Library tutorial.
