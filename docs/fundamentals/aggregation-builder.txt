.. _laravel-aggregation-builder:

===================
Aggregation Builder
===================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, pipeline, expression

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to perform aggregations and construct
pipelines by using the {+odm-short+} aggregation builder. The aggregation
builder lets you use a typesafe syntax to construct a MongoDB
**aggregation pipeline**.

An aggregation pipeline is a data processing pipeline that takes documents
as input, sequentially performs transformations and computations on the data,
and outputs the results as a new set of documents.

An aggregation pipeline is composed of **aggregation stages**, which are
operators that process input data and output data that the next stage uses as
its input.

The {+odm-short+} aggregation builder lets you build aggregation stages and
aggregation pipelines. The following sections show examples of how to use the
aggregation builder to create the stages of an aggregation pipeline:

- :ref:`laravel-build-aggregation`
- :ref:`laravel-create-custom-operator-factory`

.. tip::

   The aggregation builder feature is available only in {+odm-short+} versions
   4.3 and later. To learn more about running aggregations without the
   aggregation builder, see :ref:`laravel-query-builder-aggregations` in the
   Query Builder guide.

.. _laravel-build-aggregation:

Create an Aggregation Pipeline
------------------------------

To start an aggregation pipeline, call the ``Model::aggregate()`` method.
Then, chain the aggregation stage methods in the sequence you want them to be
run.

The aggregation builder includes the following namespaces that you can import
to build aggregation stages:

- ``MongoDB\Builder\Accumulator``
- ``MongoDB\Builder\Expression``
- ``MongoDB\Builder\Query``
- ``MongoDB\Builder\Type```

.. tip::

   To see a complete list and the source code, see the
   `mongodb/mongodb-php-builder <https://github.com/mongodb/mongo-php-builder/>`__
   GitHub repository.

This section features the following examples of common aggregation stages and
of an aggregation pipeline:

- :ref:`laravel-aggregation-match-stage-example`
- :ref:`laravel-aggregation-group-stage-example`
- :ref:`laravel-aggregation-sort-stage-example`
- :ref:`laravel-aggregation-project-stage-example`
- :ref:`laravel-aggregation-pipeline-example`

To learn more about MongoDB aggregation operators, see
:manual:`Aggregation Stages </reference/operator/aggregation-pipeline/>` in
the {+server-docs-name+}.

Sample Documents
~~~~~~~~~~~~~~~~

The following examples run aggregation pipelines on a collection represented
by the ``User`` model. You can add the sample data by running the following
``insert()`` method:

.. literalinclude:: /includes/fundamentals/aggregation/AggregationsBuilderTest.php
      :language: php
      :dedent:
      :start-after: begin aggregation builder sample data
      :end-before: end aggregation builder sample data

.. _laravel-aggregation-match-stage-example:

Match Stage Example
~~~~~~~~~~~~~~~~~~~

You can chain the ``match()`` method to your aggregation pipeline to specify
a query filter. If you omit this stage, the ``aggregate()``  method outputs
all the documents in the model's collection for the following stage.

This aggregation stage is often placed first to retrieve the data by using
available indexes and reduce the amount of data that the subsequent stages
process.

.. tip::

   If you omit the ``match()`` method, the aggregation pipeline matches all
   documents in the collection that correspond to the model before other
   aggregation stages.

This example shows how to construct criteria for a **match** aggregation
stage by using the ``Query`` builder. The match stage includes the the following
criteria:

- Returns results that match either of the query filters by using the
  ``Query::or()`` function
- Matches documents that contain a ``occupation`` field with a value of ``"designer"``
  by using the ``Query::query()`` and ``Query::eq()`` functions
- Matches documents that contain a ``name`` field with a value of ``"Eliud Nkosana"``
  by using the ``Query::query()`` and ``Query::eq()`` functions

Click the :guilabel:`{+code-output-label+}` button to see the documents
returned by running the code:

.. io-code-block::

   .. input:: /includes/fundamentals/aggregation/AggregationsBuilderTest.php
      :language: php
      :dedent:
      :start-after: begin aggregation match stage
      :end-before: end aggregation match stage

   .. output::
      :language: json
      :visible: false

      [
        {
          "_id": ...,
          "name": "Janet Doe",
          "occupation": "designer",
          "birthday": {
            "$date": {
              "$numberLong": "541728000000"
            }
          }
        },
        {
          "_id": ...,
          "name": "Eliud Nkosana",
          "occupation": "engineer",
          "birthday": {
            "$date": {
              "$numberLong": "449884800000"
            }
          }
        },
        {
          "_id": ...,
          "name": "Ellis Lee",
          "occupation": "designer",
          "birthday": {
            "$date": {
              "$numberLong": "834019200000"
            }
          }
        }
      ]

.. _laravel-aggregation-group-stage-example:

Group Stage Example
~~~~~~~~~~~~~~~~~~~

You can chain the ``group()`` method to your aggregation pipeline to modify the
structure of the input data by performing calculations and grouping the data by
common field values.

This aggregation stage is often placed immediately after a match stage to
reduce the data the subsequent stages process.

This example shows how to define the group keys in a **group** aggregation
stage by using the ``Expression`` builder. The group stage specifies the
following grouping behavior:

- Sets the value of the group key, represented by the ``_id`` field to the
  field value defined by the ``Expression`` builder
- References the document values in the ``occupation`` field by calling the
  ``Expression::fieldPath()`` function

Click the :guilabel:`{+code-output-label+}` button to see the documents
returned by running the code:

.. io-code-block::

   .. input:: /includes/fundamentals/aggregation/AggregationsBuilderTest.php
      :language: php
      :dedent:
      :start-after: begin aggregation group stage
      :end-before: end aggregation group stage

   .. output::
      :language: json
      :visible: false

      [
        { "_id": "engineer" },
        { "_id": "designer" }
      ]

.. tip::

   This example stage performs a similar grouping to an equivalent
   ``distinct()`` query builder method. To learn more about the ``distinct()``
   method, see the :ref:`laravel-distinct-usage` usage example.

.. _laravel-aggregation-sort-stage-example:

Sort Stage Example
~~~~~~~~~~~~~~~~~~

You can chain the ``sort()`` method to your aggregation pipeline to specify
the output order of the documents.

This aggregation stage can be added anywhere in the pipeline. It is often
placed after the group stage since it can depend on the grouped data. We
recommend placing the sort stage as late as possible in the pipeline to limit
the data it processes.

To specify an ascending sort, set the field value to the ``Sort::Asc`` enum.

To specify a descending sort, set the field value to the ``Sort::Desc`` enum.

This example shows a ``sort()`` aggregation pipeline stage that sorts the
documents by the ``name`` field to ``Sort::Desc``, which corresponds to reverse
alphabetical order. Click the :guilabel:`{+code-output-label+}` button to see
the documents returned by running the code:

.. io-code-block::

   .. input:: /includes/fundamentals/aggregation/AggregationsBuilderTest.php
      :language: php
      :dedent:
      :start-after: begin aggregation sort stage
      :end-before: end aggregation sort stage

   .. output::
      :language: json
      :visible: false

      [
        {
          "_id": ...,
          "name": "Janet Doe",
          "occupation": "designer",
          "birthday": {
            "$date": {
              "$numberLong": "541728000000"
            }
          }
        },
        {
          "_id": ...,
          "name": "Francois Soma",
          "occupation": "engineer",
          "birthday": {
            "$date": {
              "$numberLong": "886377600000"
            }
          }
        },
        {
          "_id": ...,
          "name": "Ellis Lee",
          "occupation": "designer",
          "birthday": {
            "$date": {
              "$numberLong": "834019200000"
            }
          }
        },
        {
          "_id": ...,
          "name": "Eliud Nkosana",
          "occupation": "engineer",
          "birthday": {
            "$date": {
              "$numberLong": "449884800000"
            }
          }
        },
        {
          "_id": ...,
          "name": "Bran Steafan",
          "occupation": "engineer",
          "birthday": {
            "$date": {
              "$numberLong": "894326400000"
            }
          }
        },
        {
          "_id": ...,
          "name": "Alda Gr√∂ndal",
          "occupation": "engineer",
          "birthday": {
            "$date": {
              "$numberLong": "1009843200000"
            }
          }
        }
      ]

.. _laravel-aggregation-project-stage-example:

Project Stage Example
~~~~~~~~~~~~~~~~~~~~~

You can chain the ``project()`` method to your aggregation pipeline to specify
which fields to display in the documents output by this stage.

To specify fields to include, pass the name of a field and a truthy value,
such as ``1`` or ``true``. All other fields are omitted from the output.

Alternatively, to specify fields to exclude, pass each field name and
a falsy value, such as ``0`` or ``false``. All other fields are included in
the output.

.. tip::

   When you specify fields to include, the ``_id`` field is included by default.
   To exclude the ``_id`` field, you must explicitly exclude it in he
   projection.

This example shows how to use the ``project()`` method aggregation stage to
include only the ``name`` field and exclude all other fields from the output.
Click the :guilabel:`{+code-output-label+}` button to see the data returned by
running the code:

.. io-code-block::

   .. input:: /includes/fundamentals/aggregation/AggregationsBuilderTest.php
      :language: php
      :dedent:
      :start-after: begin aggregation project stage
      :end-before: end aggregation project stage

   .. output::
      :language: json
      :visible: false

      [
        { "name": "Alda Gr√∂ndal" },
        { "name": "Francois Soma" },
        { "name": "Janet Doe" },
        { "name": "Eliud Nkosana" },
        { "name": "Bran Steafan" },
        { "name": "Ellis Lee" }
      ]


.. _laravel-aggregation-pipeline-example:

Aggregation Pipeline Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This aggregation pipeline example chains multiple stages. Each stage runs
on the output retrieved from each preceding stage. In this example, the
stages perform the following operations sequentially:

- Match all documents in the collection since the ``match()`` stage
  is omitted.
- Add the ``year`` field to the documents and set the value to the year,
  extracted from the ``birthday`` field.
- Group the documents by the value of the ``occupation`` field and compute
  the average value of the ``year`` field for each group by using the
  ``Accumulator::avg()`` function.
- Sort the documents by the group key field in ascending order.
- Create the ``profession`` field from the value of the group key field,
  include the ``year_avg`` field, and omit the ``_id`` field.

Click the :guilabel:`{+code-output-label+}` button to see the data returned by
running the code:

.. io-code-block::

   .. input:: /includes/fundamentals/aggregation/AggregationsBuilderTest.php
      :language: php
      :dedent:
      :start-after: begin pipeline example
      :end-before: end pipeline example

   .. output::
      :language: json
      :visible: false

      [
        {
          "year_avg": 1991.5,
          "profession": "designer"
        },
        {
          "year_avg": 1995.5,
          "profession": "engineer"
        }
      ]


.. _laravel-create-custom-operator-factory:

Create a Custom Operator Factory
--------------------------------

A custom operator factory is a means of defining custom operators that you
can use in Eloquent query builder expressions.

TODO
